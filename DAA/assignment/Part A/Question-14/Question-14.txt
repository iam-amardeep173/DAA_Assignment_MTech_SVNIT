#############################################
System Reqruirements
    --> Compiler : g++ compiler
    --> Hardware : sufficient main memory
    --> OS       : Windows
#############################################

Program File : Question14.cpp
How to run the program: Open Command Prompt/Powershell
                        Go to the folder using cd
                        Run the following command to compile the cpp file
Command to compile and run the program : Command to run program : g++ -o Question14 Question14.cpp&Question14.exe

** Overview **
     MinHeapSet is a C++ data structure that supports the following operations on a set of integers:
       insert(x) - Insert an integer x into the set.
       delete(k) - Delete the kth smallest element from the set.
       member(x) - Check if an integer x is a member of the set.
     The primary feature of this data structure is that it ensures all operations take O(log n) time on an n-element set.

** Implementation **
    The MinHeapSet is implemented using a min-heap. Here's a brief overview of the methods and their implementations:

    insert(x): Inserts the element x into the min-heap and maintains the min-heap property by moving the element up the heap as needed.
    delete(k): Deletes the kth smallest element from the set by swapping it with the last element in the heap, removing it, and then restoring the min-heap property by moving the element down the heap as needed.
    member(x): Checks if the integer x is a member of the set by performing a linear search in the heap.


** Time Complexity Analysis **
    All operations of the MinHeapSet data structure have a time complexity of O(log n), where n is the number of elements in the set. 
    Here's a breakdown of the time complexity for each operation:

    insert(x): O(log n) - Insertion involves moving the element up the heap, which takes O(log n) time in the worst case.
    delete(k): O(log n) - Deletion involves moving the element down the heap, which also takes O(log n) time in the worst case.
    member(x): O(n) - Membership testing uses a linear search in the heap, which takes O(n) time in the worst case. This operation could be optimized by maintaining a separate data structure (e.g., a hash table) to track membership efficiently.


  4 Empirical Analysis
    4.1 Input size 100000
        Inserting 100000 elements
            Time Taken: 0.084184 seconds

        Search 94062
            Time Taken: 0.000209 seconds

        Delete 100000th smallest element
            Time Taken: 0.000003 seconds

    4.2 Input size 1000000
        Inserting 1000000 elements
            Time Taken: 1.68518 seconds

        Search 1000275
            Time Taken: 0.000724 seconds

        Delete 1000000th smallest element
            Time Taken: 0.000004 seconds
            
                    Time Taken for input :65 microsecond
          Based on Time function used :
      +--------------------------------------------------------------------------------+
	|	Operations   	|	n(input size) 	  |	 Time taken                |
	+--------------------------------------------------------------------------------+	
	|	Inserting	|	       100000       |	    0.084184 seconds       |
	|	    	        |	       1000000      |       1.68518 seconds        |
	+--------------------------------------------------------------------------------+
	|	Searching       |	       100000       |	    0.000209 seconds       |
	|	    		|	       1000000      |       0.000724 seconds       |
	+--------------------------------------------------------------------------------+
	|	Delete		|	       100000       |	    0.000013 seconds       |
	|	    		|	       1000000      |       0.000021 seconds       |
	+--------------------------------------------------------------------------------+



   Keep in mind that while the insertion and deletion operations have O(log n) complexity, the membership testing operation currently has O(n) complexity due to the linear search.
 Depending on your use case, you may consider optimizing this operation by implementing a more efficient membership check, such as using a hash table or a binary search tree for membership tracking.